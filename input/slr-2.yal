(* Lexer para Gramática 
No. 2 - Expresiones
aritméticas extendidas
let dddd = sdfsdfs
*)

(* Introducir cualquier header aqui *)

let delim = ["\s\t\n"]
let ws = delim+
let letter = ['A'-'Z''a'-'z']
let digit = ['0'-'9']
let digits = digit+
let id = letter(letter|digit)*
let number = digits(.digits)?('E'['+''-']?digits)?

rule tokens = 
    ws        { return WHITESPACE } 
  | 'if'      { return IF }              (* Cambie por una acción válida, que devuelva el token *)
  | 'else'    { return ELSE }
  | 'then'    { return ELSE }
  | id        { return ID }
  | number    { return NUMBER }
  | '+'       { return PLUS }
  | '-'       { return MINUS }
  | '*'       { return TIMES }
  | '/'       { return DIV }
  | '('       { return LPAREN }
  | ')'       { return RPAREN }
  

(* Introducir cualquier trailer aqui *)